---
title: "Lab 06 - Parallel computing"
format:
  html:
    embed-resources: true
---

# Learning goals

* Parallel computing for simulations

# Lab task

**Part 1 (Overhead costs)**:

Compare the timing of taking the sum of 100 numbers when parallelized versus not.  For the unparallized (serialized) version, use the following:


```{r}
set.seed(123)
x <- runif(n=100)

serial_sum <- function(x){
  x_sum <- sum(x)
  return(x_sum)
}
```


For the parallized version, follow this outline

```{r}
library(parallel)
```

```{r, eval=FALSE}

set.seed(123)
x <- runif(n=100)

parallel_sum <- function(){
  
  
  # Set number of cores to use
  # make cluster and export to the cluster the x variable
  # Use "split function to divide x up into as many chunks as the number of cores
  
  # Calculate partial sums doing something like:
  
  partial_sums <- parallel::parSapply(cl, x_split, sum)
  
  # Stop the cluster
  
  # Add and return the partial sums
  
}

```


```{r, echo=FALSE, eval=TRUE, results=FALSE}

set.seed(123)
x <- runif(n=100)

parallel_sum <- function(x){
  
  
  num_cores <- parallel::detectCores()-1
  cl <- makeCluster(num_cores)
  clusterExport(cl,"x")
  
  x_split <- suppressWarnings(split(x, 1:num_cores))
  
  partial_sums <- parallel::parSapply(cl, x_split, sum)
  
  stopCluster(cl)
  
  x_sum <- sum(partial_sums)
  
  return(x_sum)
  
}
```

Compare the timing of the two approaches:

```{r}
bench::mark(serial=serial_sum(x),parallel=parallel_sum(x),relative=TRUE)
```




**Part 2**:

Using your homework 1 solution, use parallel computing to generate replicates of the trial design.  Compare the timing when not using parallel computing versus when using parallel computing.  (If you used parallel computing in your submission, remove or modify the parallel computing component and compare the timing).